//
// Game.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Game: Codable, JSONEncodable, Hashable {

    static let slugRule = StringRule(minLength: 1, maxLength: nil, pattern: "/^[-a-zA-Z0-9_]+$/")
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: Int?
    public var slug: String?
    public var name: String?
    public var released: Date?
    public var tba: Bool?
    public var backgroundImage: String?
    public var rating: Double
    public var ratingTop: Int?
    public var ratings: AnyCodable?
    public var ratingsCount: Int?
    public var reviewsTextCount: String?
    public var added: Int?
    public var addedByStatus: AnyCodable?
    public var metacritic: Int?
    /** in hours */
    public var playtime: Int?
    public var suggestionsCount: Int?
    public var updated: Date?
    public var esrbRating: GameEsrbRating?
    public var platforms: [GamePlatformsInner]?

    public init(id: Int? = nil, slug: String? = nil, name: String? = nil, released: Date? = nil, tba: Bool? = nil, backgroundImage: String? = nil, rating: Double, ratingTop: Int? = nil, ratings: AnyCodable? = nil, ratingsCount: Int? = nil, reviewsTextCount: String? = nil, added: Int? = nil, addedByStatus: AnyCodable? = nil, metacritic: Int? = nil, playtime: Int? = nil, suggestionsCount: Int? = nil, updated: Date? = nil, esrbRating: GameEsrbRating? = nil, platforms: [GamePlatformsInner]? = nil) {
        self.id = id
        self.slug = slug
        self.name = name
        self.released = released
        self.tba = tba
        self.backgroundImage = backgroundImage
        self.rating = rating
        self.ratingTop = ratingTop
        self.ratings = ratings
        self.ratingsCount = ratingsCount
        self.reviewsTextCount = reviewsTextCount
        self.added = added
        self.addedByStatus = addedByStatus
        self.metacritic = metacritic
        self.playtime = playtime
        self.suggestionsCount = suggestionsCount
        self.updated = updated
        self.esrbRating = esrbRating
        self.platforms = platforms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case slug
        case name
        case released
        case tba
        case backgroundImage = "background_image"
        case rating
        case ratingTop = "rating_top"
        case ratings
        case ratingsCount = "ratings_count"
        case reviewsTextCount = "reviews_text_count"
        case added
        case addedByStatus = "added_by_status"
        case metacritic
        case playtime
        case suggestionsCount = "suggestions_count"
        case updated
        case esrbRating = "esrb_rating"
        case platforms
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(released, forKey: .released)
        try container.encodeIfPresent(tba, forKey: .tba)
        try container.encodeIfPresent(backgroundImage, forKey: .backgroundImage)
        try container.encode(rating, forKey: .rating)
        try container.encodeIfPresent(ratingTop, forKey: .ratingTop)
        try container.encodeIfPresent(ratings, forKey: .ratings)
        try container.encodeIfPresent(ratingsCount, forKey: .ratingsCount)
        try container.encodeIfPresent(reviewsTextCount, forKey: .reviewsTextCount)
        try container.encodeIfPresent(added, forKey: .added)
        try container.encodeIfPresent(addedByStatus, forKey: .addedByStatus)
        try container.encodeIfPresent(metacritic, forKey: .metacritic)
        try container.encodeIfPresent(playtime, forKey: .playtime)
        try container.encodeIfPresent(suggestionsCount, forKey: .suggestionsCount)
        try container.encodeIfPresent(updated, forKey: .updated)
        try container.encodeIfPresent(esrbRating, forKey: .esrbRating)
        try container.encodeIfPresent(platforms, forKey: .platforms)
    }
}

