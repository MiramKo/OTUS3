//
// Twitch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Twitch: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let descriptionRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let thumbnailRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let languageRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: Int?
    public var externalId: Int?
    public var name: String?
    public var description: String?
    public var created: Date?
    public var published: Date?
    public var thumbnail: String?
    public var viewCount: Int?
    public var language: String?

    public init(id: Int? = nil, externalId: Int? = nil, name: String? = nil, description: String? = nil, created: Date? = nil, published: Date? = nil, thumbnail: String? = nil, viewCount: Int? = nil, language: String? = nil) {
        self.id = id
        self.externalId = externalId
        self.name = name
        self.description = description
        self.created = created
        self.published = published
        self.thumbnail = thumbnail
        self.viewCount = viewCount
        self.language = language
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case externalId = "external_id"
        case name
        case description
        case created
        case published
        case thumbnail
        case viewCount = "view_count"
        case language
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(published, forKey: .published)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
        try container.encodeIfPresent(viewCount, forKey: .viewCount)
        try container.encodeIfPresent(language, forKey: .language)
    }
}

